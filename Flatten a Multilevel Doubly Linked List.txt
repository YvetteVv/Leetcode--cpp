/*
// Definition for a Node.
class Node {
public:
    int val = NULL;
    Node* prev = NULL;
    Node* next = NULL;
    Node* child = NULL;

    Node() {}

    Node(int _val, Node* _prev, Node* _next, Node* _child) {
        val = _val;
        prev = _prev;
        next = _next;
        child = _child;
    }
};
*/
class Solution {
public:
    Node* flatten(Node* head) {
        Node* curr = head;
        returnLastandFlatten(curr);   
        return head;
    }
    
    // recursively find the last node of the chind list and link properlly
    // dummy node is used to return the last node
    Node* returnLastandFlatten(Node* curr) {
        Node* dummy = new Node(0);
        dummy->next = curr;
        while (curr) {
            if (curr->child) {
                Node* lastofChild = returnLastandFlatten(curr->child);
                lastofChild->next = curr->next;
                if (curr->next) curr->next->prev = lastofChild;
                curr->next = curr->child;
                curr->child->prev = curr;
                curr->child = nullptr;
            }
            curr = curr->next;
            dummy = dummy->next;
        }
        return dummy;
    }
};